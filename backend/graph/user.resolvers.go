package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/guidowilliam11/server/graph/model"
	"github.com/guidowilliam11/server/service"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, inputUser model.NewUser) (*model.User, error) {
	password, err := model.HashPassword(inputUser.Password)

	if err != nil {
		return nil, err
	}

	user := &model.User{
		ID:        uuid.NewString(),
		FirstName: inputUser.FirstName,
		LastName:  inputUser.LastName,
		Email:     inputUser.Email,
		Password:  password,
		Dob:       inputUser.Dob,
		Gender:    inputUser.Gender,
		Status:    false,
	}

	return user, r.DB.Save(&user).Error
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, inputUser model.NewUser) (*model.User, error) {
	var user *model.User

	if err := r.DB.First(&user, "id = ?", id).Error; err != nil {
		return nil, err
	}

	user.FirstName = inputUser.FirstName
	user.LastName = inputUser.LastName
	user.Email = inputUser.Email
	user.Password = inputUser.Password
	user.Dob = inputUser.Dob
	user.Gender = inputUser.Gender
	return user, r.DB.Save(&user).Error
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*model.User, error) {
	var user *model.User

	if err := r.DB.First(&user, "id = ?", id).Error; err != nil {
		return nil, err
	}
	return user, r.DB.Delete(&user).Error
}

// LoginUser is the resolver for the loginUser field.
func (r *mutationResolver) LoginUser(ctx context.Context, email string, password string) (string, error) {
	return service.UserLogin(ctx, email, password)
}

// VerifyUser is the resolver for the verifyUser field.
func (r *mutationResolver) ActivateUser(ctx context.Context, id string) (bool, error) {
	var user *model.User
	if err := r.DB.First(&user, "id = ?", id).Error; err != nil {
		return false, err
	}
	user.Status = true
	return true, r.DB.Save(&user).Error
}

// UpdatePassword is the resolver for the updatePassword field.
func (r *mutationResolver) UpdatePassword(ctx context.Context, id string, password string) (*model.User, error) {
	newPassword, err := model.HashPassword(password)

	if err != nil {
		return nil, err
	}

	var user *model.User

	if err := r.DB.First(&user, "id = ?", id).Error; err != nil {
		return nil, err
	}

	user.Password = newPassword

	return user, r.DB.Save(&user).Error
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*model.User, error) {
	var user *model.User
	return user, r.DB.First(&user, "id = ?", id).Error
}

// GetAllUser is the resolver for the getAllUser field.
func (r *queryResolver) GetAllUser(ctx context.Context) ([]*model.User, error) {
	var users []*model.User
	return users, r.DB.Find(&users).Error
}

// FindUser is the resolver for the findUser field.
func (r *queryResolver) FindUser(ctx context.Context, email string) (*model.User, error) {
	var user *model.User
	return user, r.DB.First(&user, "email = ?", email).Error
}

// GetUserByToken is the resolver for the getUserByToken field.
func (r *queryResolver) GetUserByToken(ctx context.Context, token string) (*model.User, error) {
	var user *model.User
	parsedToken, err := service.JwtValidate(ctx, token)
	if err != nil {
		return nil, err
	}

	// Access the claims from the token
	if claims, ok := parsedToken.Claims.(*service.JwtCustom); ok && parsedToken.Valid {
		// Here, you can extract the user ID from the claims
		userID := claims.ID
		fmt.Println(userID)
		// Fetch the user from your data source using the user ID
		// For example:
		user, err := r.Query().GetUser(ctx, userID)
		if err != nil {
			return nil, err
		}
		return user, nil
	}
	return user, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
